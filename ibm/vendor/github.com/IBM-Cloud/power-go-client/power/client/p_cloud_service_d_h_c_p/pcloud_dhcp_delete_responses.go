// Code generated by go-swagger; DO NOT EDIT.

package p_cloud_service_d_h_c_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/IBM-Cloud/power-go-client/power/models"
)

// PcloudDhcpDeleteReader is a Reader for the PcloudDhcpDelete structure.
type PcloudDhcpDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PcloudDhcpDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewPcloudDhcpDeleteAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPcloudDhcpDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPcloudDhcpDeleteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPcloudDhcpDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPcloudDhcpDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPcloudDhcpDeleteAccepted creates a PcloudDhcpDeleteAccepted with default headers values
func NewPcloudDhcpDeleteAccepted() *PcloudDhcpDeleteAccepted {
	return &PcloudDhcpDeleteAccepted{}
}

/*PcloudDhcpDeleteAccepted handles this case with default header values.

OK
*/
type PcloudDhcpDeleteAccepted struct {
	Payload models.Object
}

func (o *PcloudDhcpDeleteAccepted) Error() string {
	return fmt.Sprintf("[DELETE /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpDeleteAccepted  %+v", 202, o.Payload)
}

func (o *PcloudDhcpDeleteAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpDeleteBadRequest creates a PcloudDhcpDeleteBadRequest with default headers values
func NewPcloudDhcpDeleteBadRequest() *PcloudDhcpDeleteBadRequest {
	return &PcloudDhcpDeleteBadRequest{}
}

/*PcloudDhcpDeleteBadRequest handles this case with default header values.

Bad Request
*/
type PcloudDhcpDeleteBadRequest struct {
	Payload *models.Error
}

func (o *PcloudDhcpDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *PcloudDhcpDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpDeleteForbidden creates a PcloudDhcpDeleteForbidden with default headers values
func NewPcloudDhcpDeleteForbidden() *PcloudDhcpDeleteForbidden {
	return &PcloudDhcpDeleteForbidden{}
}

/*PcloudDhcpDeleteForbidden handles this case with default header values.

Forbidden
*/
type PcloudDhcpDeleteForbidden struct {
	Payload *models.Error
}

func (o *PcloudDhcpDeleteForbidden) Error() string {
	return fmt.Sprintf("[DELETE /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpDeleteForbidden  %+v", 403, o.Payload)
}

func (o *PcloudDhcpDeleteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpDeleteNotFound creates a PcloudDhcpDeleteNotFound with default headers values
func NewPcloudDhcpDeleteNotFound() *PcloudDhcpDeleteNotFound {
	return &PcloudDhcpDeleteNotFound{}
}

/*PcloudDhcpDeleteNotFound handles this case with default header values.

Not Found
*/
type PcloudDhcpDeleteNotFound struct {
	Payload *models.Error
}

func (o *PcloudDhcpDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpDeleteNotFound  %+v", 404, o.Payload)
}

func (o *PcloudDhcpDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPcloudDhcpDeleteInternalServerError creates a PcloudDhcpDeleteInternalServerError with default headers values
func NewPcloudDhcpDeleteInternalServerError() *PcloudDhcpDeleteInternalServerError {
	return &PcloudDhcpDeleteInternalServerError{}
}

/*PcloudDhcpDeleteInternalServerError handles this case with default header values.

Internal Server Error
*/
type PcloudDhcpDeleteInternalServerError struct {
	Payload *models.Error
}

func (o *PcloudDhcpDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /pcloud/v1/cloud-instances/{cloud_instance_id}/services/dhcp/{dhcp_id}][%d] pcloudDhcpDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *PcloudDhcpDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

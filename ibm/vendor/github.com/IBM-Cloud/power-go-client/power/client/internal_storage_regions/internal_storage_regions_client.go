// Code generated by go-swagger; DO NOT EDIT.

package internal_storage_regions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new internal storage regions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for internal storage regions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
InternalV1StorageRegionsStoragePoolsGet gets the settings for given pool name
*/
func (a *Client) InternalV1StorageRegionsStoragePoolsGet(params *InternalV1StorageRegionsStoragePoolsGetParams, authInfo runtime.ClientAuthInfoWriter) (*InternalV1StorageRegionsStoragePoolsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalV1StorageRegionsStoragePoolsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal.v1.storage.regions.storage-pools.get",
		Method:             "GET",
		PathPattern:        "/internal/v1/storage/regions/{region_zone_id}/storage-pools/{storage_pool_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InternalV1StorageRegionsStoragePoolsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InternalV1StorageRegionsStoragePoolsGetOK), nil

}

/*
InternalV1StorageRegionsStoragePoolsGetall gets the current storage pools settings for a region zone
*/
func (a *Client) InternalV1StorageRegionsStoragePoolsGetall(params *InternalV1StorageRegionsStoragePoolsGetallParams, authInfo runtime.ClientAuthInfoWriter) (*InternalV1StorageRegionsStoragePoolsGetallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalV1StorageRegionsStoragePoolsGetallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal.v1.storage.regions.storage-pools.getall",
		Method:             "GET",
		PathPattern:        "/internal/v1/storage/regions/{region_zone_id}/storage-pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InternalV1StorageRegionsStoragePoolsGetallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InternalV1StorageRegionsStoragePoolsGetallOK), nil

}

/*
InternalV1StorageRegionsStoragePoolsPut updates the settings for given pool name
*/
func (a *Client) InternalV1StorageRegionsStoragePoolsPut(params *InternalV1StorageRegionsStoragePoolsPutParams, authInfo runtime.ClientAuthInfoWriter) (*InternalV1StorageRegionsStoragePoolsPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalV1StorageRegionsStoragePoolsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal.v1.storage.regions.storage-pools.put",
		Method:             "PUT",
		PathPattern:        "/internal/v1/storage/regions/{region_zone_id}/storage-pools/{storage_pool_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InternalV1StorageRegionsStoragePoolsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InternalV1StorageRegionsStoragePoolsPutOK), nil

}

/*
InternalV1StorageRegionsThresholdsGet gets the current default threshold settings for a region zone
*/
func (a *Client) InternalV1StorageRegionsThresholdsGet(params *InternalV1StorageRegionsThresholdsGetParams, authInfo runtime.ClientAuthInfoWriter) (*InternalV1StorageRegionsThresholdsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalV1StorageRegionsThresholdsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal.v1.storage.regions.thresholds.get",
		Method:             "GET",
		PathPattern:        "/internal/v1/storage/regions/{region_zone_id}/thresholds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InternalV1StorageRegionsThresholdsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InternalV1StorageRegionsThresholdsGetOK), nil

}

/*
InternalV1StorageRegionsThresholdsPut updates a default threshold setting for a region zone
*/
func (a *Client) InternalV1StorageRegionsThresholdsPut(params *InternalV1StorageRegionsThresholdsPutParams, authInfo runtime.ClientAuthInfoWriter) (*InternalV1StorageRegionsThresholdsPutAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInternalV1StorageRegionsThresholdsPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "internal.v1.storage.regions.thresholds.put",
		Method:             "PUT",
		PathPattern:        "/internal/v1/storage/regions/{region_zone_id}/thresholds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InternalV1StorageRegionsThresholdsPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InternalV1StorageRegionsThresholdsPutAccepted), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
